package com.maxeler.examples.udpOneToMany;


import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.networking.v1.kernel_types.UDPOneToManyRXType;
import com.maxeler.networking.v1.kernel_types.UDPOneToManyTXType;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;
import com.maxeler.networking.v1.managers.netlib.UDPChecksumMode;
import com.maxeler.networking.v1.managers.netlib.UDPConnectionMode;
import com.maxeler.networking.v1.managers.netlib.UDPStream;


public class UdpOneToManyManager extends NetworkManager {

	public UdpOneToManyManager(UdpOneToManyParameters params) {
		super(params.getEngineParams());

		debug.setDebugLevel(new DebugLevel().setHasStreamStatus(params.hasStreamStatus()));

		UDPOneToManyRXType udpTypeRx = new UDPOneToManyRXType();
		UDPOneToManyTXType udpTypeTx = new UDPOneToManyTXType();

		UDPStream udpTop1 = addUDPStream("udpTopPort1", Max4NetworkConnection.QSFP_TOP_10G_PORT1, UDPConnectionMode.OneToMany, UDPChecksumMode.Disabled);
		ManagerClock netClk = getNetworkClock(Max4NetworkConnection.QSFP_TOP_10G_PORT1);
		pushDefaultClock(netClk);

		addFramedStreamToCPU("toCpu", udpTypeRx, 512, 512) <== udpTop1.getReceiveStream();
		udpTop1.getTransmitStream() <== addFramedStreamFromCPU("fromCpu", udpTypeTx);
	}

	public static void main(String[] args) {
		UdpOneToManyParameters params = new UdpOneToManyParameters(args);
		UdpOneToManyManager manager = new UdpOneToManyManager(params);

		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

		manager.build();
	}
}
