/**
 * Copyright 2013, Maxeler Technologies
 * All rights reserved
 *
 */

package com.maxeler.maxjlibs.functors;

import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelObjectVectorizable;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public interface BinaryFunctor<T extends KernelObjectVectorizable<T, T>> {
	T op(T a, T b);

	public interface Associative {} // just a marker

	public abstract static class AssociativeBinaryFunctor<T extends KernelObjectVectorizable<T, T>>
		implements BinaryFunctor<T>, Associative {}

	public static class Add<T extends KernelObjectVectorizable<T, T>> extends AssociativeBinaryFunctor<T> {
		@Override
		public T op(T a, T b) {
			return a + b;
		}
	}

	public static class Sub<T extends KernelObjectVectorizable<T, T>> implements BinaryFunctor<T> {
		@Override
		public T op(T a, T b) {
			return a - b;
		}
	}

	public static class Mul<T extends KernelObjectVectorizable<T, T>> extends AssociativeBinaryFunctor<T> {
		@Override
		public T op(T a, T b) {
			return a * b;
		}
	}

	public static class Div<T extends KernelObjectVectorizable<T, T>> implements BinaryFunctor<T> {
		@Override
		public T op(T a, T b) {
			return a / b;
		}
	}

	public static class And<T extends KernelObjectVectorizable<T, T>> extends AssociativeBinaryFunctor<T> {
		@Override
		public T op(T a, T b) {
			return a & b;
		}
	}

	public static class Or<T extends KernelObjectVectorizable<T, T>> extends AssociativeBinaryFunctor<T> {
		@Override
		public T op(T a, T b) {
			return a | b;
		}
	}

	public static class Xor<T extends KernelObjectVectorizable<T, T>> extends AssociativeBinaryFunctor<T> {
		@Override
		public T op(T a, T b) {
			return a ^ b;
		}
	}

	public static class Lt<T extends KernelObjectVectorizable<T, T>> implements BinaryFunctor<T> {
		@Override
		public T op(T a, T b) {
			return a < b;
		}
	}

	public static class Lte<T extends KernelObjectVectorizable<T, T>> implements BinaryFunctor<T> {
		@Override
		public T op(T a, T b) {
			return a <= b;
		}
	}

	public static class Gt<T extends KernelObjectVectorizable<T, T>> implements BinaryFunctor<T> {
		@Override
		public T op(T a, T b) {
			return a > b;
		}
	}

	public static class Gte<T extends KernelObjectVectorizable<T, T>> implements BinaryFunctor<T> {
		@Override
		public T op(T a, T b) {
			return a >= b;
		}
	}

	public static class Eq<T extends KernelObjectVectorizable<T, T>> implements BinaryFunctor<T> {
		@Override
		public T op(T a, T b) {
			return a.eq(b);
		}
	}

	public static class Neq<T extends KernelObjectVectorizable<T, T>> implements BinaryFunctor<T> {
		@Override
		public T op(T a, T b) {
			return a.neq(b);
		}
	}

	public static class Max extends AssociativeBinaryFunctor<DFEVar> {
		@Override
		public DFEVar op(DFEVar a, DFEVar b) {
			return KernelMath.max(a, b);
		}
	}

	public static class Min extends AssociativeBinaryFunctor<DFEVar> {
		@Override
		public DFEVar op(DFEVar a, DFEVar b) {
			return KernelMath.min(a, b);
		}
	}

};