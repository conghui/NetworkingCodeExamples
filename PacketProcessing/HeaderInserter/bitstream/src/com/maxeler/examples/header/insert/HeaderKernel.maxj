package com.maxeler.examples.header.insert;

import maxpower.kernel.frames.HeaderInserter;
import maxpower.kernel.lite.LiteIo;
import maxpower.kernel.lite.utils.FrameIo.InputFrame;
import maxpower.kernel.lite.utils.FrameIo.InterFrameGapSpec;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLite;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLite.IO.PushOutput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.managers.DFEManager;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxeleros.managerblocks.StructUtils;
import com.maxeler.networking.v1.framed_kernels.FramedLinkType;

public class HeaderKernel extends KernelLite {
	public static final String INPUT = "frameIn";
	public static final String OUTPUT = "frameOut";


	/*
	 * The structure of the header we want to insert
	 */
	public static HeaderType headerType = new HeaderType();

	public static class HeaderType extends DFEStructType {
		public static String HeaderFieldA = "hfa";
		public static String HeaderFieldB = "hfb";
		public static String HeaderFieldC = "hfc";
		public static String HeaderFieldD = "hfd";

		public HeaderType() {
			super(
					sft(HeaderFieldA, dfeUInt(8)),
					sft(HeaderFieldB, dfeUInt(64)),
			        sft(HeaderFieldC, dfeUInt(48)),
			        sft(HeaderFieldD, dfeUInt(32)));
		}
	}

	/*
	 * The structure of the CPU information we need
	 */
	public static CpuInfoType cpuInfoType = new CpuInfoType();

	public static class CpuInfoType extends DFEStructType {
		public static String CpuData1 = "cpuData1";
		public static String CpuData2 = "cpuData2";

		public CpuInfoType() {
			super(sft(CpuData1, dfeUInt(32)), sft(CpuData2, dfeUInt(8)));
		}
	}


	private final FramedLinkType linkType;

	private int getLinkDataWidthBytes() {
		return linkType.getDFEStructType().getTypeForField(linkType.getData()).getTotalBytes();
	}

	private int getHeaderSizeBytes() {
		return headerType.getTotalBytes();
	}

	private int getHeaderSizeCycles() {
		return getHeaderSizeBytes() / getLinkDataWidthBytes();
	}

	private int getHeaderOverheadCycles() {
		return MathUtils.ceilDivide(getHeaderSizeBytes(), getLinkDataWidthBytes());
	}


	HeaderKernel(DFEManager mgr, FramedLinkType linkType) {
		super(mgr, "HeaderKernel");

		this.linkType = linkType;

		/*
		 * First, compute how much space we need to create and use that as the inter-frame gap
		 */
		int headerOverhead = getHeaderOverheadCycles();


		InputFrame<DFEStruct> input =
		        LiteIo.inputFrame(this, INPUT, linkType, new InterFrameGapSpec(headerOverhead), false);

		DFEVar data = (DFEVar) input.data[linkType.getData()];

		/*
		 * We create a memory that will be filled up by the CPU.
		 * We will look in to this memory based on the incoming data.
		 * We will use the information we find to fill up the header.
		 */
		Memory<DFEStruct> rom = mem.alloc(cpuInfoType, 512);
		rom.mapToCPU("info");

		// The first word of the data will tell us where to read from in the rom
		DFEVar index = stream.offset(data, getHeaderSizeCycles()).slice(0, 9).cast(dfeUInt(9));
		DFEStruct cpuInfo = rom.read(index);


		DFEStruct theHeader = headerType.newInstance(this);
		theHeader[HeaderType.HeaderFieldA] <== cpuInfo[CpuInfoType.CpuData2];
		theHeader[HeaderType.HeaderFieldB] <== constant.var(dfeUInt(64), 0xAABBCCDDEEFFL);
		theHeader[HeaderType.HeaderFieldC] <== constant.var(dfeUInt(48), 0xCCCCCCCCCCCCL);
		theHeader[HeaderType.HeaderFieldD] <== cpuInfo[CpuInfoType.CpuData1];

		HeaderInserter headerInserter = HeaderInserter.insertHeader(input.data, input.valid,
		        linkType, linkType, theHeader.pack());

		PushOutput<DFEStruct> output = io.pushOutput(OUTPUT, linkType.getDFEStructType(),
		        input.getInputStallLatency() + 1 /* 1 for the output stall signal path */);
		output.data <== headerInserter.framedLink;
		output.valid <== headerInserter.valid;

		DFEVar outputStall = optimization.pipeline(output.stall);
		input.getUserStall() <== outputStall;
	}

	public static void main(String args[]) {
		StructUtils.printDFEStructType(cpuInfoType);
		StructUtils.printDFEStructType(headerType);
	}
}
