package com.maxeler.examples.dynamicgap;

import com.maxeler.examples.dynamicgap.Types.LinkWithGapIndicator;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;

public class Processor extends Kernel {
	public static String INPUT = "inputFrame";
	public static String OUTPUT = "outputFrame";

	public Processor(KernelParameters parameters) {
		super(parameters);
		flush.disabled();

		LinkWithGapIndicator linkType = Types.linkWithGapIndicator;

		NonBlockingInput<DFEStruct> input = io.nonBlockingInput(INPUT,
				linkType.getDFEStructType(),
				constant.var(true),
				linkType.getDFEStructType().getPositionForField(linkType.getEOF()),
				DelimiterMode.EOF_POSITION,
				0, // No inter-frame-gap
				NonBlockingMode.NO_TRICKLING);


		DFEStruct inputStruct = input.data;
		DFEVar inputValid = input.valid;
		DFEVar sof = inputValid & (DFEVar)inputStruct.get(linkType.getSOF());
		DFEVar eof = inputValid & (DFEVar)inputStruct.get(linkType.getEOF());
		DFEVar isGap = inputStruct.get(linkType.getGapIndicator());
		DFEVar newValid = inputValid & ~isGap;


		DFEVar packetNumber = control.count.makeCounter(control.count.makeParams(16).withEnable(eof)).getCount();
		DFEVar packetIndex = control.count.makeCounter(control.count.makeParams(16).withReset(sof).withEnable(inputValid)).getCount();


		/*
		 * The input now will have a gap packet in between normal packets.
		 */
		debug.simPrintf(inputValid, "Processor frame[%d]: [%d] is gap? %d, sof %d, eof %d, data 0x%x\n",
				packetNumber,
				packetIndex,
				inputStruct.get(linkType.getGapIndicator()),
				inputStruct.get(linkType.getSOF()),
				inputStruct.get(linkType.getEOF()),
				inputStruct.get(linkType.getData()));




		io.output(OUTPUT, linkType, newValid) <== inputStruct;
	}

}
