package com.maxeler.examples.signExtender;


import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;
import com.maxeler.networking.v1.managers.netlib.UDPChecksumMode;
import com.maxeler.networking.v1.managers.netlib.UDPConnectionMode;
import com.maxeler.networking.v1.managers.netlib.UDPStream;


public class SignExtManager extends NetworkManager {

	public SignExtManager(SignExtEngineParameters params) {
		super(params.getEngineParams());

		debug.setDebugLevel(new DebugLevel().setHasStreamStatus(params.hasStreamStatus()));

		UDPStream frames = addUDPStream("udpTopPort1", Max4NetworkConnection.QSFP_TOP_10G_PORT1, UDPConnectionMode.OneToOne, UDPChecksumMode.DropBadFrames);

		ManagerClock netClk = getNetworkClock(Max4NetworkConnection.QSFP_TOP_10G_PORT1);
		pushDefaultClock(netClk);

		KernelConfiguration myKernelConfig = new KernelConfiguration(getCurrentKernelConfig());
		KernelBlock kernel = addKernel(new SignExtKernel(makeKernelParameters("exampleKernel", myKernelConfig)));
		kernel.getInput(SignExtKernel.INPUT_UDP) <== frames.getReceiveStream();
		frames.getTransmitStream() <== kernel.getOutput(SignExtKernel.OUTPUT_UDP);
		addFramedStreamToCPU("toCPU", SignExtKernel.outputLinkType) <== kernel.getOutput(SignExtKernel.OUTPUT_VALUES);
	}

	public static void main(String[] args) {
		SignExtEngineParameters params = new SignExtEngineParameters(args);
		SignExtManager manager = new SignExtManager(params);

		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

		manager.build();
	}

}
