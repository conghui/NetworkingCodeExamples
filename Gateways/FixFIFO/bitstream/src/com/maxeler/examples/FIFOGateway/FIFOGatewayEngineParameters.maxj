package com.maxeler.examples.FIFOGateway;


import com.maxeler.maxcompiler.v2.build.ApplicationParameters;
import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.build.EngineParameters.Target;
import com.maxeler.maxcompiler.v2.managers.DFEModel;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.NetworkManager.TcpNumConnectionsRequired;
import com.maxeler.networking.v1.managers.blocks.MaxTCPVersion;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;

public class FIFOGatewayEngineParameters extends ApplicationParameters {

	public FIFOGatewayEngineParameters(String[] args) {
		super(args);
	}

	@Override
	protected void declarations() {
		 declareParam("board", DataType.DFEMODEL, DFEModel.ISCA);
		 declareParam("target", Target.class, Target.DFE_SIM);
		 declareParam("hasStreamStatus", DataType.BOOL, true);
		 declareParam("ethConnection",  Max4NetworkConnection.class, Max4NetworkConnection.QSFP_TOP_10G_PORT1);
		 declareParam("MaxTCPVersion", MaxTCPVersion.class, MaxTCPVersion.TCP_1KC_V2);
		 declareParam("numTcpConnectionsSupported", TcpNumConnectionsRequired.class, TcpNumConnectionsRequired.Max1024Connections);

        declareParam("maxTcpWindowSize", DataType.INT, 64 * 1024);
	}
	public void applyParamsToManager(NetworkManager manager) {
        logParameters(manager);

        manager.addMaxFileStringConstant("target", getTarget().name());
        manager.addMaxFileStringConstant("board", getDFEModel().toString());
        manager.addMaxFileConstant("isSimulation", isSimulation() ? 1 : 0);
        manager.addMaxFileConstant("hasStreamStatus", hasStreamStatus() ? 1 : 0);
        manager.addMaxFileConstant("numTcpConnectionsSupported", getNumTcpConnectionsSupported().getNumConnections());
        manager.addMaxFileConstant("maxTcpWindowSize", getMaxTcpWindowSize());
        manager.addMaxFileStringConstant("ethConnection", getEthConnection().name());
        manager.addMaxFileConstant("rxWindowSizeKB", manager.network_config.getTCPReceiveWindowSize(getEthConnection()));
        manager.addMaxFileConstant("txWindowSizeKB", manager.network_config.getTCPTransmitWindowSize(getEthConnection()));
	}



	public boolean isSimulation() {
		return getTarget() == Target.DFE_SIM;
	}

	public Target getTarget() {
		return getParam("target");
	}

	public boolean hasStreamStatus() {
		return getParam("hasStreamStatus");
	}


	@Override
	protected void deriveParameters() {
	}

	@Override
	public String getBuildName() {
		return "FIFOGateway";
	}

	@Override
	public DFEModel getDFEModel() {
		return getParam("board");
	}

	@Override
	protected void validate() {
	}

	public EngineParameters getEngineParams() {
		return new EngineParameters(getBuildName(), getDFEModel(), getTarget());
	}

	public Max4NetworkConnection getEthConnection() {
		return getParam("ethConnection");
	}

	public MaxTCPVersion getMaxTCPVersion() {
		return getParam("MaxTCPVersion");
	}

	public TcpNumConnectionsRequired getNumTcpConnectionsSupported() {
		return getParam("numTcpConnectionsSupported");
	}

	public int getMaxTcpWindowSize() {
		return getParam("maxTcpWindowSize");
	}
}
