package com.maxeler.examples.FIFOGateway;


import java.util.LinkedList;
import java.util.List;

import com.maxeler.examples.FIFOGateway.protocol.BinProtoSpecFactory;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.Max4QMem;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControllerConfig;
import com.maxeler.maxjlibs.network.TCPFramer;
import com.maxeler.maxjlibs.network.TCPFramerConstants;
import com.maxeler.maxjlibs.network.proto.ProtoSpecFactory;
import com.maxeler.networking.statemachines.TCPRxWindowMemory;
import com.maxeler.networking.statemachines.TCPTxWindowMemory;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.TCPStreamManyConnections;
import com.maxeler.utils.MemoryManager;


public class FIFOGatewayManager extends NetworkManager {
	private final MemoryManager memManager;

	private void configureMemoryController() {
		MemoryControllerConfig mcc = new MemoryControllerConfig();
		config.setOnCardMemoryFrequency(800);
		mcc.setMAX4qMode(true);
		mcc.setBurstSize(8);

		mcc.setEnableParityMode(true, true, 72, false);
		mcc.setEnableFlagCommands(true);
		config.setMemoryControllerConfig(mcc);
	}

	public FIFOGatewayManager(FIFOGatewayEngineParameters params) {
		super(params);
		params.applyParamsToManager(this);

		FIFOGatewayTypes types = new FIFOGatewayTypes(params.getMaxTCPVersion());

		configureMemoryController();

		TCPFramerConstants.enableDebug = false;
		TCPFramerConstants.enableDebugPrints = false;

		memManager = new MemoryManager(this);

		TCPStreamManyConnections tcpStream = addTCPStreamManyConnections("tcpStream", params.getEthConnection(), params.getnumTcpConnectionsRequired());

		ManagerClock netClk = getNetworkClock(params.getEthConnection());
		pushDefaultClock(netClk);

		if (!params.isSimulation()) {
			TCPTxWindowMemory.connectToQMem(this, params.getEthConnection(), params.getMaxTCPVersion(), Max4QMem.QMEM1);
			TCPRxWindowMemory.connectToQMem(this, params.getEthConnection(), params.getMaxTCPVersion(), Max4QMem.QMEM2);
		}

		int framerDepth = params.getnumTcpConnectionsRequired().getNumConnections() * params.getMaxTcpWindowSize();

		List<ProtoSpecFactory> specFactories = new LinkedList<ProtoSpecFactory>();
		specFactories.add(new BinProtoSpecFactory());

		DFELink framed = TCPFramer.create(this, "gateway",
				params.getEthConnection(),
				tcpStream,
				tcpStream.getConnStateEventStream(),
				framerDepth,
				memManager, specFactories);

		KernelBlock inbound = addKernel(new Inbound(makeKernelParameters("inbound"), types));
		inbound.getInput(Inbound.INPUT_FROM_FRAMER) <== framed;
		addFramedStreamToCPU("toCPU", types.simpleLinkType, 128, 256) <== inbound.getOutput(Inbound.OUTPUT_TO_CPU);

		KernelBlock outbound = addKernel(new Outbound(makeKernelParameters("outbound"), types));

		outbound.getInput(Outbound.INPUT_FROM_CPU) <== addFramedStreamFromCPU("fromCPU", types.simpleLinkType);
		tcpStream.getTransmitStream() <== outbound.getOutput(Outbound.OUTPUT_TO_TCP);
	}

	public static void main(String[] args) {
		FIFOGatewayEngineParameters params = new FIFOGatewayEngineParameters(args);
		FIFOGatewayManager manager = new FIFOGatewayManager(params);
		manager.build();
	}
}
