package com.maxeler.examples.FIFOGateway;
import com.maxeler.examples.FIFOGateway.FIFOGatewayTypes.InboundHeaderType;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxjlibs.network.TCPFramerTypes.TCPFramerLinkType;


public class Inbound extends Kernel {

	public static final String INPUT_FROM_FRAMER = "fromFramer";
	public static final String OUTPUT_TO_CPU = "toCPU";

	public Inbound(KernelParameters parameters, FIFOGatewayTypes types) {
		super(parameters);

		flush.disabled();

		DFEStructType framerLinkStructType = types.fixFramerLinkType.getDFEStructType();

		NonBlockingInput<DFEStruct> fromFramer = io.nonBlockingInput(INPUT_FROM_FRAMER, framerLinkStructType,
				constant.var(true),
				framerLinkStructType.getPositionForField(types.fixFramerLinkType.getEOF()),
				DelimiterMode.EOF_POSITION,
				2,
				NonBlockingMode.NO_TRICKLING);

		DFEStruct framerData = fromFramer.data;
		DFEVar valid = fromFramer.valid;

		DFEVar isStart = valid & (DFEVar)framerData[TCPFramerLinkType.SOF];

		DFEVar inject = stream.offset(isStart, 1);


		DFEStruct inboundHeader = types.inboundHeaderType.newInstance(this);
		inboundHeader[InboundHeaderType.SOCKET_NUM] <== framerData[TCPFramerLinkType.SOCKET].cast(inboundHeader[InboundHeaderType.SOCKET_NUM].getType());
		inboundHeader[InboundHeaderType.CONNECTION_STATE] <== framerData[TCPFramerLinkType.CONNECTION_STATE];
		inboundHeader[InboundHeaderType.CONNECTION_STATE_VALID] <== framerData[TCPFramerLinkType.CONNECTION_STATE_VALID];
		inboundHeader[InboundHeaderType.CONTAINS_DATA] <== framerData[TCPFramerLinkType.CONTAINS_DATA];
		inboundHeader[InboundHeaderType.CURRENT_STATE] <== framerData[TCPFramerLinkType.CURRENT_STATE];
		inboundHeader[InboundHeaderType.ERROR_CODE] <== framerData[TCPFramerLinkType.ERROR_CODE];
		inboundHeader[InboundHeaderType.LEVEL] <== framerData[TCPFramerLinkType.LEVEL];
		inboundHeader[InboundHeaderType.PROTOCOL_ID] <== framerData[TCPFramerLinkType.PROTOCOL_ID];
		inboundHeader[InboundHeaderType.PADDING1] <== constant.var(false);
		inboundHeader[InboundHeaderType.PADDING14] <== constant.var(dfeUInt(14), 0);

		debug.simPrintf(isStart, "Inbound: Socket %d - > State %d, StateValid = %d, Code = %d\n", inboundHeader[InboundHeaderType.SOCKET_NUM],
				inboundHeader[InboundHeaderType.CONNECTION_STATE], inboundHeader[InboundHeaderType.CONNECTION_STATE_VALID],
				inboundHeader[InboundHeaderType.ERROR_CODE]);


		DFEStruct outputLink = types.simpleLinkType.getDFEStructType().newInstance(this);
		outputLink[types.simpleLinkType.getData()] <== inject ?
									stream.offset(inboundHeader.pack(), 1) : (DFEVar)framerData[TCPFramerLinkType.DATA];

		outputLink[types.simpleLinkType.getSOF()] <== inject;
		outputLink[types.simpleLinkType.getEOF()] <== inject ? 0 : (DFEVar)framerData[TCPFramerLinkType.EOF];
		outputLink[types.simpleLinkType.getMod()] <== inject ? 0 : (DFEVar)framerData[TCPFramerLinkType.MOD];


		io.output(OUTPUT_TO_CPU, types.simpleLinkType.getDFEStructType(), inject | valid) <== outputLink;
	}
}
