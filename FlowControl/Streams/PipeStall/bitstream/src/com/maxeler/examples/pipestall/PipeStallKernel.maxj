package com.maxeler.examples.pipestall;

import maxpower.kernel.lite.LiteUtils;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLite;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLite.IO.PushInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLite.IO.PushOutput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.networking.v1.managers.NetworkManager;

public class PipeStallKernel extends KernelLite {
	public static String INPUT = "inputFrame";
	public static String OUTPUT = "outputFrame";

	public PipeStallKernel(NetworkManager owner) {
		super(owner, "PipeStallKernel");

		int inputStallLatency = 2;
		PushInput<DFEVar> input = io.pushInput(INPUT, dfeUInt(128), inputStallLatency);

		DFEVar valid = input.valid;
		DFEVar data = input.data;

		DFEVar validControl = LiteUtils.scheduleGap(valid);

		/*
		 * Stall logic
		 */
		DFEVar stallNow = shouldStall(validControl, 1000);


		pushStall(stallNow);

		/*
		 * The compute which should stall
		 */
		DFEVar computeData = someCompute(data);
		/*
		 * Schedule with - since we want to stall the 'valid' signal when the compute path is stalled.
		 * This forces the scheduling fifo to be created inside the stall scope.
		 */
		DFEVar computeValid = valid.scheduleWith(computeData);

		popStall();

		DFEVar outputValid = computeValid & ~stallNow;
		DFEVar outputData = computeData;

		DFEVar outputStall = dfeBool().newInstance(this);
		OffsetExpr outputStallLatency = stream.measureDistance("computeValidToOutputValid", computeValid, outputValid);
		outputStallLatency += stream.measureDistance("outputStallToInputStall", outputStall, input.stall);
		outputStallLatency += stream.measureDistance("inputValidToPipeStall", validControl, stallNow);
		outputStallLatency += inputStallLatency;

		PushOutput<DFEVar> pushOut = io.pushOutput(OUTPUT, dfeUInt(128), outputStallLatency);

		pushOut.data <== outputData;
		pushOut.valid <== outputValid;


		outputStall <== pushOut.stall;
		input.stall <== outputStall;
	}

	public DFEVar shouldStall(DFEVar inputValid, long numItems) {
		DFEVar finished = control.count.makeCounter(
				control.count.makeParams(MathUtils.bitsToRepresent(numItems)).withWrapMode(Count.WrapMode.STOP_AT_MAX)
					.withEnable(inputValid)
					.withMax(numItems)
				).getCount() === numItems;


		/*
		 * Stall when the input stops and the we didn't see all the data yet.
		 */

		return ~(finished | inputValid);
	}

	public DFEVar someCompute(DFEVar data) {
		DFEVar a = data.slice(0, 64).cast(dfeUInt(64));
		DFEVar b = data.slice(64, 64).cast(dfeUInt(64));

		DFEVar c = (a+b)*(b+1);

		return (c * c).cast(dfeUInt(128));
	}
}
