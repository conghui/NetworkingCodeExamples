package com.maxeler.examples.tcpoffload;

import com.maxeler.examples.tcpoffload.TcpOffloadTypes.SimpleLinkType;
import com.maxeler.examples.tcpoffload.TcpOffloadTypes.TcpOffloadHeader;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.networking.types.TCPType;

public class TcpOffloadRx extends Kernel {
	public static String FROM_TCP = "tcp";
	public static String TO_CPU = "cpu";

	public TcpOffloadRx(KernelParameters params) {
		super(params);
		flush.disabled();

		/*
		 * Since we're inserting 1 cycle on the output, we need to guarantee at least 1 cycle of inter-frame-gap
		 */
		int minInterFrameGap = 1;
		NonBlockingInput<DFEStruct> input = io.nonBlockingInput(FROM_TCP, TcpOffloadTypes.tcpType.getDFEStructType(),
				constant.var(true),
				TcpOffloadTypes.tcpType.getDFEStructType().getPositionForField(TCPType.EOF),
				DelimiterMode.EOF_POSITION,
				minInterFrameGap,
				NonBlockingMode.NO_TRICKLING);


		DFEStruct inputStruct = input.data;
		DFEVar inputValid = input.valid;
		DFEVar sof = inputStruct.get(TCPType.SOF);
		DFEVar eof = inputStruct.get(TCPType.EOF);
		DFEVar mod = inputStruct.get(TCPType.MOD);
		DFEVar data = inputStruct.get(TCPType.DATA);
		DFEVar socket = inputStruct.get(TCPType.SOCKET);

		DFEVar isStart = inputValid & sof;

		DFEStruct header = TcpOffloadTypes.tcpOffloadHeader.newInstance(this);
		DFEType socketIdType = (DFEType) TcpOffloadTypes.tcpOffloadHeader.getTypeForField(TcpOffloadHeader.SOCKET_ID);

		header[TcpOffloadHeader.SOCKET_ID] <== socket.cast(socketIdType);


		DFEVar insertNow = stream.offset(isStart, 1);
		DFEVar outputNow = inputValid | insertNow;

		DFEStruct toCpu = TcpOffloadTypes.simpleLinkType.newInstance(this);
		toCpu[SimpleLinkType.SOF] <== insertNow;
		toCpu[SimpleLinkType.EOF] <== eof;
		toCpu[SimpleLinkType.MOD] <== mod;
		toCpu[SimpleLinkType.DATA] <== insertNow ? header.pack() : data;

		io.output(TO_CPU, TcpOffloadTypes.simpleLinkType, outputNow) <== toCpu;


	}
}
