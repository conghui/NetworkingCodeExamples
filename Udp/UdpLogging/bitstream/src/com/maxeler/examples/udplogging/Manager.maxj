package com.maxeler.examples.udplogging;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.OptimizationGoal;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;
import com.maxeler.udp.fastpath.MaxUdpFastPath;
import com.maxeler.udp.fastpath.MaxUdpFastPath.RxChecksumMode;
import com.maxeler.udp.fastpath.MaxUdpMultiRx;
import com.maxeler.udp.fastpath.types.UdpMultiRxType;


public class Manager extends NetworkManager {

	public Manager(EngineParameters configuration) {
		super(configuration);

		debug.setDebugLevel(new DebugLevel().setHasStreamStatus(true));

		network_config.setEthernetMacType(EthernetMacType.ULTRA_LOW_LATENCY);

		/*
		 * Multicast feed input
		 */
		MaxUdpMultiRx rx = MaxUdpFastPath.createMultiRx(this,
				"UdpMulticastFeed", Max4NetworkConnection.QSFP_TOP_10G_PORT1, RxChecksumMode.DISABLED);

		UdpMultiRxType inputType = rx.getRxStreamType();

		KernelBlock k = addKernel(new MyKernel(makeKernelParameters("myKernel"), inputType));
		k.getInput(MyKernel.INPUT) <== rx.getRxStream();
		addStreamToCPU("summary") <== k.getOutput(MyKernel.OUTPUT);
	}

	public static void main(String[] args) {
		Parameters params = new Parameters(args);
		Manager manager = new Manager(params);

		BuildConfig bc = manager.getBuildConfig();
		bc.setBuildEffort(Effort.VERY_HIGH);
		bc.setOptimizationGoal(OptimizationGoal.SPEED);
		bc.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		bc.setMPPRParallelism(params.getMPPRThreads());
		bc.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

		manager.build();
	}

}
