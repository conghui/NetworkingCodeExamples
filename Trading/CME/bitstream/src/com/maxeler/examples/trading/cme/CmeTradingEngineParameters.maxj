package com.maxeler.examples.trading.cme;


import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.OptimizationGoal;
import com.maxeler.maxcompiler.v2.managers.DFEModel;
import com.maxeler.networking.v1.managers.netlib.Max4NetworkConnection;

public class CmeTradingEngineParameters extends EngineParameters {

	public CmeTradingEngineParameters(String[] args) {
		super(args);
	}

	@Override
	protected void declarations() {
		 declareParam("DFEModel", DataType.DFEMODEL, DFEModel.ISCA);
		 declareParam("maxFileName", DataType.STRING, "CmeTrading");
		 declareParam("hasStreamStatus", DataType.BOOL, true);
		 declareParam("mdConnectionA", Max4NetworkConnection.class, Max4NetworkConnection.QSFP_TOP_10G_PORT1);
		 declareParam("mdConnectionB", Max4NetworkConnection.class, Max4NetworkConnection.QSFP_BOT_10G_PORT1);
		 declareParam("orderEntryConnection", Max4NetworkConnection.class, Max4NetworkConnection.QSFP_TOP_10G_PORT1);
		 declareParam("optimizationGoal", OptimizationGoal.class, OptimizationGoal.SPEED);
		 declareParam("buildEffort", Effort.class, Effort.VERY_HIGH);
		 declareParam("hasChipscope", DataType.BOOL, false);
		 declareParam("tag", DataType.STRING, ""); // can be used to run two builds simultaneously with slightly different code
	}

	@Override
	public String getBuildName() {
		return super.getBuildName()
		+ (hasChipscope() ? "_CS" : "")
		+ getParam("tag");
	}

	public boolean isSimulation() {
		return getTarget() == Target.DFE_SIM;
	}

	public boolean hasStreamStatus() {
		return getParam("hasStreamStatus");
	}

	public Effort getBuildEffort() {
		return getParam("buildEffort");
	}

	public OptimizationGoal getGoal() {
		return getParam("optimizationGoal");
	}

	public boolean hasChipscope() {
		return getParam("hasChipscope");
	}

	public Max4NetworkConnection getMdConnectionA() {
		return getParam("mdConnectionA");
	}

	public Max4NetworkConnection getMdConnectionB() {
		return getParam("mdConnectionB");
	}

	public Max4NetworkConnection getOrderEntryConnection() {
		return getParam("orderEntryConnection");
	}
}
