package com.maxeler.examples.tradingstrategy.signals;

import java.util.ArrayList;
import java.util.List;

import com.maxeler.examples.tradingstrategy.types.Types;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelBase;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelComponent;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public class ExponentialMovingAverage extends KernelComponent {

	public static void compute(KernelBase<?> owner,
			Signals signals, DFEVar secSelect,
			DFEVar alpha, DFEVar price, DFEVar valid) {

		new ExponentialMovingAverage(owner, signals, secSelect, alpha, price, valid);
	}

	private static int count = 0;
	private ExponentialMovingAverage(KernelBase<?> owner,
			Signals signals, DFEVar secSelect, DFEVar alpha, DFEVar price, DFEVar valid) {
		super(owner);

		DFEVar nextEma = Types.computeType.newInstance(owner);
		DFEVar priceCasted = price.cast(Types.computeType);

		List<DFEVar> previousEmas = new ArrayList<>();
		List<DFEVar> firsts = new ArrayList<>();

		count++;

		OffsetExpr loop = stream.makeOffsetAutoLoop("nextEmaLoop" + count);

		for (int i = 0; i < signals.secIds.size(); i++) {
			DFEVar secValid = secSelect.slice(i) & valid;
			DFEVar notFirst = control.count.makeCounter(
					control.count.makeParams(1)
						.withEnable(secValid)
						.withWrapMode(WrapMode.STOP_AT_MAX)
						.withMax(1)
						.withInitValue(0)
					).getCount();
			firsts.add(notFirst === 0);
			DFEVar previousEma = Reductions.streamHold(stream.offset(nextEma, -loop), stream.offset(secValid, -loop));
			previousEmas.add(previousEma);
			signals.ema.add(Reductions.streamHold(nextEma, secValid));
		}

		DFEVar previousEma = control.oneHotMux(secSelect, previousEmas);
		DFEVar first = control.oneHotMux(secSelect, firsts);
		DFEVar invAlpha = constant.var(Types.computeType, 1) - alpha;

		nextEma <== first ? priceCasted : (priceCasted * alpha + (previousEma * invAlpha));
    }
}
